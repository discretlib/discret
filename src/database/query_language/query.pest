// query HeroNameAndFriends($episode: Episode, orderBy: { createdAt: asc } , take: 1, after: 1 ) {

// hero(episode: $episode) {
// name
// friends ( orderBy: { name: desc } ) {
// name
// }
// }

// field : referencedBy(type,[field]),
// numfriends: count(friends)
// sum()
// min
// max

// }
// @deprecated
// subscription
// query	mutation	subscription deletion
// }

// {
// "episode": "JEDI"
// }

// type query String{ type+ }
// query string ()
// query string (parameters)

// type {field+}

// type(parameters)

// field:
// name
// name()
// name(parameters)
// name{
// name
// }
// name() {
// name
// }

// name(parameters){
// name
// }

// if id is passed -> update
// else create
// mutate name {
// friend{ //update friends
// id : &id
// name: &q //update name
// truc: {  //replace truc id by new id
// id: $idtruc
// }
// atruc: [{$idtuc}, {name:}] //add $idtruc and create name
// }
// }
// monitor

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

identifier = @{ (LETTER | NUMBER)+ }

query = { SOI ~ "query" ~ identifier ~ queryParam? ~ "{" ~ dataType+ ~ "}" ~ EOI }

typeParameters = {
    "(" ~ ")"
  | "(" ~ typeParam ~ (", " ~ typeParam)* ~ ")"
}
typeParam      = {
    filter
  | orderBy
  | limit
}

dataType = {
    typeName ~ typeParameters? ~ "{" ~ (field)+ ~ "}"
}

field = {
    function
  | dataType
  | alias
  | identifier
}

function = {
    identifier ~ ":" ~ ("count" | "sum" | "avg" | "min" | "max" | "refBy") ~ dataType
}

queryParam   =  {
    "(" ~ ")"
  | "(" ~ variablePair ~ ("," ~ variablePair)* ~ ")"
}
variable     = @{ "$" ~ identifier }
variableType =  { ("String" | "Number" | "Integer") }
variablePair =  { variable ~ ":" ~ variableType }

typeName = { alias | identifier }
alias    = {
    identifier ~ ":" ~ identifier
}

filter      = { identifier ~ (gtOrEq | ltOrEq | eq | gt | lt) ~ filterValue }
filterValue = { variable | string | integer | number | null }

orderBy    = { "orderBy" ~ "{" ~ orderParam ~ ("," ~ orderParam)* ~ "}" }
orderParam = { identifier ~ (^"asc" | ^"desc") }

limit      = { "limit" ~ limitValue }
limitValue = { unsigned_int | variable }

eq     = { "=" }
gt     = { ">" }
gtOrEq = { ">=" }
lt     = { "<" }
ltOrEq = { "<=" }

null = { "null" }

string = ${ "\"" ~ inner ~ "\"" }
inner  = @{ char* }
char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

integer = @{
    "-"? ~ ASCII_DIGIT+
}

unsigned_int = { ASCII_DIGIT+ }
